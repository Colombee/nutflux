{"version":3,"sources":["logo.svg","view/components/homepage.jsx","view/components/Header.jsx","view/components/showCard.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Home","react_default","a","createElement","className","Link","to","class","Component","Header","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","search","event","setState","target","value","_this2","filteredMovie","MovieData","movie","filter","Movies","keys","some","key","toString","placeholder","type","onChange","updateSearch","bind","map","src","Poster","alt","Title","Year","Plot","components_Header","App","BrowserRouter","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"s6gBAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oMCgBzBC,mLAVX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,MACTL,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,UAAUF,UAAU,aAAYH,EAAAC,EAAAC,cAAA,UAAQI,MAAM,eAAd,mBAN9BC,qBCuCJC,cAvCb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,OAAS,IAHCR,4EAODS,GACXN,KAAKO,SAAS,CAACF,OAAQC,EAAME,OAAOC,yCAG7B,IAAAC,EAAAV,KACHW,EAAgBC,EAAUC,MAAMC,OAClC,SAACC,GAEC,OAAOjB,OAAOkB,KAAKD,GAAQE,KAAK,SAAAC,GAAG,OAA0D,IAAtDH,EAAOG,GAAKC,WAAWd,OAAOK,EAAKN,MAAMC,YAIpF,OACEjB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,cAAc6B,YAAY,SAASC,KAAK,OAAOZ,MAAOT,KAAKI,MAAMC,OAAQiB,SAAUtB,KAAKuB,aAAaC,KAAKxB,QAC3HZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACVoB,EAAcc,IAAI,SAASV,GAC5B,OACA3B,EAAAC,EAAAC,cAAA,OAAKC,UAAY,gBACbH,EAAAC,EAAAC,cAAA,OAAKoC,IAAMX,EAAOY,OAAQC,IAAM,GAAGrC,UAAU,sBAC7CH,EAAAC,EAAAC,cAAA,cAAMyB,EAAOc,MAAb,KACAzC,EAAAC,EAAAC,cAAA,aAAKyB,EAAOe,KAAZ,KACA1C,EAAAC,EAAAC,cAAA,aAAKyB,EAAOgB,KAAZ,iBA9BKpC,aC+BNoB,mLA1BX,OACI3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,YACTL,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,IAAIF,UAAU,aAAYH,EAAAC,EAAAC,cAAA,UAAQI,MAAM,eAAd,WACnCN,EAAAC,EAAAC,cAAC0C,EAAD,cANSrC,6BCcNsC,mLAXX,OACE7C,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,KACE9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWnD,IACjCC,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAOE,KAAK,UAAUC,UAAWvB,aANzBpB,aCKE4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.05523c7d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport './../../css/index.css';\nimport { BrowserRouter, Link, Route, Switch } from \"react-router-dom\";\n\nclass Home extends Component {\n  render() {\n    return (\n      <div className=\"Home\">\n        <Link to='/'></Link>\n        <h1>Welcome to Nutflux !</h1>\n        <Link to=\"/movies\" className=\"home-link\"><button class='home-button'>MOVIES</button></Link>\n      </div>\n    );\n  }\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport MovieData from '../../movie.json';\n\nclass Header extends Component {\n  constructor() {\n    super();\n    this.state = {\n      search : ''\n    };\n  }\n\n  updateSearch(event) {\n    this.setState({search: event.target.value});\n  }\n\n  render() {\n    let filteredMovie = MovieData.movie.filter(\n      (Movies) => {\n        // return Movies.Title.toLowerCase().indexOf(this.state.search) !== -1;\n        return Object.keys(Movies).some(key => Movies[key].toString().search(this.state.search) !== -1);\n      }\n    );\n\n    return (\n      <div>\n        <input className=\"superFilter\" placeholder=\"Search\" type='text' value={this.state.search} onChange={this.updateSearch.bind(this)}/>\n        <div className=\"marginautocenter\">\n            {filteredMovie.map(function(Movies) {\n            return (\n            <div className = \"wrapper-card\" >\n                <img src= {Movies.Poster} alt = \"\" className=\"movie-poster-card\" ></img>\n                <h3> {Movies.Title} </h3>\n                <p> {Movies.Year} </p>\n                <p> {Movies.Plot} </p>\n            </div>\n            );\n            })\n            }\n        </div>\n      </div>\n    );\n  }\n}\nexport default Header;\n","import React, { Component } from 'react';\nimport './../../css/index.css';\nimport { BrowserRouter, Link, Route, Switch } from \"react-router-dom\";\nimport movieData from './../../movie.json';\nimport Header from './Header';\n\nclass Movies extends Component {\n  render() {\n    return (\n        <div className=\"Movies\">\n            <Link to='/movies'></Link>\n            <Link to=\"/\" className=\"home-link\"><button class='home-button'>RETURN</button></Link>\n            <Header/>\n            {/* <div>\n                <div className=\"marginautocenter\">\n                    {movieData.movie.map(movie => \n                        <div className=\"flextest\">\n                            <div >\n                                <div className=\"wrapper-card\">\n                                    <img src={movie.Poster} alt=\"\" class=\"movie-poster-card\"/>\n                                    <h3>{movie.Title}</h3>\n                                    <h4>{movie.Director}</h4>\n                                    <p>{movie.Plot}</p>\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                </div>\n            </div> */}\n        </div> \n    );\n  }\n}\n\nexport default Movies;\n\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './css/App.css';\nimport Home from './view/components/homepage';\nimport Movies from './view/components/showCard';\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/movies\" component={Movies} />\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}